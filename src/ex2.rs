// Each new term in the Fibonacci sequence is generated by
// adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values
// do not exceed four million, find the sum of the even-valued terms.

fn main() {
    let mut n = 3;
    while fibonacci(n) < 4000000 {
        n += 1;
    }
    println!("{:?}", fibonacci_list(n - 1).iter().filter(|&i| i % 2 == 0).fold(0, |acc, x| acc + x));
}

fn fibonacci(n: isize) -> isize {
    match n {
        1 => 1,
        2 => 2,
        x => fibonacci(x - 1) + fibonacci(x - 2)
    }
}

fn fibonacci_list(n: isize) -> Vec<isize> {
    (1..n+1).map(|x| fibonacci(x)).collect()
}

#[test]
fn test_fibonacci() {
    assert!(fibonacci(1) == 1);
    assert!(fibonacci(2) == 2);
    assert!(fibonacci(3) == 3);
    assert!(fibonacci(10) == 89);
}

#[test]
fn test_fibonacci_list() {
    assert!(fibonacci_list(1) == [1]);
    assert!(fibonacci_list(2) == [1, 2]);
    assert!(fibonacci_list(3) == [1, 2, 3]);
    assert!(fibonacci_list(10) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]);
}
